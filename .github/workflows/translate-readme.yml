name: Translate README

on:
  workflow_call:
    inputs:
      file:
        description: '要翻译的 Markdown 文件路径'
        required: false
        default: README.md
        type: string
    secrets:
      OPENAI_API_KEY:
        required: true

jobs:
  translate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install openai@4 fs-extra

      - name: Translate README
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FILE: ${{ inputs.file }}
        run: |
          node <<EOF
          import fs from 'fs-extra';
          import OpenAI from 'openai';

          const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
          const file = process.env.FILE || 'README.md';
          const content = await fs.readFile(file, 'utf-8');

          const targets = {
            'en': 'English',
            'zh-CN': 'Simplified Chinese',
            'zh-TW': 'Traditional Chinese',
            'ja': 'Japanese'
          };

          for (const [code, lang] of Object.entries(targets)) {
            console.log(`Translating to ${lang}...`);
            const completion = await openai.chat.completions.create({
              model: 'gpt-4o-mini',
              messages: [
                { role: 'system', content: `Translate the following Markdown to ${lang}, preserving formatting and code blocks.` },
                { role: 'user', content }
              ]
            });
            const translated = completion.choices[0].message.content;
            await fs.writeFile(`README.${code}.md`, translated, 'utf-8');
            console.log(`Saved README.${code}.md`);
          }
          EOF

      - name: Insert language navigation to README.md
        run: |
          node <<EOF
          import fs from "fs-extra";

          async function insertLanguageNav() {
            const baseReadme = "README.md";
            const languages = [
              { code: "en", label: "English" },
              { code: "zh-CN", label: "简体中文" },
              { code: "zh-TW", label: "繁體中文" },
              { code: "ja", label: "日本語" },
            ];

            let content = await fs.readFile(baseReadme, "utf-8");

            // 生成导航栏 Markdown
            const navLine = languages
              .map(({ code, label }) => `[${label}](README.${code}.md)`)
              .join(" | ");

            // 删除已有导航行（假设是第一行并含括号）
            const lines = content.split("\n");
            if (lines[0].includes("](README.")) {
              lines.shift();
            }
            lines.unshift(navLine);

            const newContent = lines.join("\n");
            await fs.writeFile(baseReadme, newContent, "utf-8");
            console.log("✅ 已成功插入语言切换导航");
          }

          insertLanguageNav().catch(console.error);
          EOF
